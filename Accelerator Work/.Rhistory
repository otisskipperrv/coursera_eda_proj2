scale_y_continuous("President Number", breaks = seq(34,44), label = seq(34,44)) +
scale_x_date("Year", date_breaks = "4 year", date_labels = "'%y") +
ggtitle("Presidential Terms By Party")
presidential %>%
mutate(id = 33 + row_number()) %>%
ggplot(aes(start, id, colour = party)) +
geom_point() +
geom_segment(aes(xend = end, yend = id)) +
scale_colour_manual(values = c(Republican = "red", Democratic = "blue")) +
scale_y_continuous("President Number", breaks = seq(34,44), label = seq(34,44)) +
scale_x_date("Year", date_breaks = "4 year", date_labels = "'%y") +
ggtitle("Presidential Terms By Party") +
geom_text(aes(label = presidential$name), nudge_y = -.4, nudge_x = 2100)
?geom_text
presidential %>%
mutate(id = 33 + row_number()) %>%
ggplot(aes(start, id, colour = party)) +
geom_point() +
geom_segment(aes(xend = end, yend = id)) +
scale_colour_manual(values = c(Republican = "red", Democratic = "blue")) +
scale_y_continuous("President Number", breaks = seq(34,44), label = seq(34,44)) +
scale_x_date("Year", date_breaks = "4 year", date_labels = "'%y") +
ggtitle("Presidential Terms By Party") +
geom_text(aes(label = presidential$name, size = 1), nudge_y = -.4, nudge_x = 2100)
presidential %>%
mutate(id = 33 + row_number()) %>%
ggplot(aes(start, id, colour = party)) +
geom_point() +
geom_segment(aes(xend = end, yend = id)) +
scale_colour_manual(values = c(Republican = "red", Democratic = "blue")) +
scale_y_continuous("President Number", breaks = seq(34,44), label = seq(34,44)) +
scale_x_date("Year", date_breaks = "4 year", date_labels = "'%y") +
ggtitle("Presidential Terms By Party") +
geom_text(aes(label = presidential$name, size = .1), nudge_y = -.4, nudge_x = 2100)
presidential %>%
mutate(id = 33 + row_number()) %>%
ggplot(aes(start, id, colour = party)) +
geom_point() +
geom_segment(aes(xend = end, yend = id)) +
scale_colour_manual(values = c(Republican = "red", Democratic = "blue")) +
scale_y_continuous("President Number", breaks = seq(34,44), label = seq(34,44)) +
scale_x_date("Year", date_breaks = "4 year", date_labels = "'%y") +
ggtitle("Presidential Terms By Party") +
geom_text(aes(label = presidential$name, size = 4), nudge_y = -.4, nudge_x = 2100)
presidential %>%
mutate(id = 33 + row_number()) %>%
ggplot(aes(start, id, colour = party)) +
geom_point() +
geom_segment(aes(xend = end, yend = id)) +
scale_colour_manual(values = c(Republican = "red", Democratic = "blue")) +
scale_y_continuous("President Number", breaks = seq(34,44), label = seq(34,44)) +
scale_x_date("Year", date_breaks = "4 year", date_labels = "'%y") +
ggtitle("Presidential Terms By Party") +
geom_text(aes(label = presidential$name), nudge_y = -.4, nudge_x = 2100, show.legend =FALSE)
ggplot(diamonds, aes(carat, price)) +
geom_point(aes(colour = cut), alpha = 1/20)
ggplot(diamonds, aes(carat, price)) +
geom_point(aes(colour = cut), alpha = 1/20) +
guides(colour = guide_legend(nrow = 1, override.aes = list(size = 4)))
ggplot(diamonds, aes(carat, price)) +
geom_point(aes(colour = cut), alpha = 1/20) +
guides(colour = guide_legend(nrow = 5, override.aes = list(size = 4)))
ggplot(diamonds, aes(carat, price)) +
geom_point(aes(colour = cut), alpha = 1/20) +
guides(colour = guide_legend(nrow = 5, override.aes = list(size = 5)))
ggplot(diamonds, aes(carat, price)) +
geom_point(aes(colour = cut), alpha = 1/20) +
guides(colour = guide_legend(nrow = 5, override.aes = list(size = colour)))
ggplot(diamonds, aes(carat, price)) +
geom_point(aes(colour = cut), alpha = 1/20) +
guides(colour = guide_legend(nrow = 5, override.aes = list(size = 1)))
ggplot(diamonds, aes(carat, price)) +
geom_point(aes(colour = cut), alpha = 1/20) +
guides(colour = guide_legend(nrow = 5, override.aes = list(size = 5, colour = cut)))
ggplot(diamonds, aes(carat, price)) +
geom_point(aes(colour = cut), alpha = 1/20) +
guides(colour = cut)
ggplot(diamonds, aes(carat, price)) +
geom_point(aes(colour = cut), alpha = 1/20) +
guides(colour = guide_legend())
ggplot(diamonds, aes(carat, price)) +
geom_point(aes(colour = cut), alpha = 1/20) +
guides(colour = guide_legend(override.aes = list(colour = 3)))
ggplot(diamonds, aes(carat, price)) +
geom_point(aes(colour = cut), alpha = 1/20) +
guides(colour = guide_legend(override.aes = list(colour = "red")))
ggplot(diamonds, aes(carat, price)) +
geom_point(aes(colour = cut), alpha = 1/20) +
guide_legend(override.aes = list(colour = "red"))
ggplot(diamonds, aes(carat, price)) +
geom_point(aes(colour = cut), alpha = 1/20) +
guides(colour = guide_legend(override.aes = list(alpha=1)))
library(tidyverse)
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(colour = class)) +
geom_smooth(se = FALSE) +
labs(
x = "Engine displacement (L)",
y = "Highway fuel economy (mpg)",
title = "Here's a custom title for my plot",
sub = "And here's a custom subtitle",
colour = "Car type"
)
ggplot(mpg,aes(displ, hwy)) +
geom_point(aes(colour = class)) +
facet_grid(.~class)+
geom_smooth()
diamonds %>%
ggplot(aes(price))+
geom_histogram(bins = 20) +
labs(
title = "Historgram Distribution of Diamond Prices",
caption = "data taken from diamonds data set within ggplot",
x = "price of diamond",
y = "count of diamonds"
) +
theme(legend.position = "none")
displ <- c(Inf, Inf, -Inf, -Inf)
hwy <- c(Inf, -Inf, Inf, -Inf)
txt <- c("top right", "bottom right", "bottom left", "top left")
tmp <- tibble(hjust, vjust, txt)
tmp
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_text(aes(label = txt), data = tmp, hjust ="top", vjust = "right") +
geom_text(aes(label = txt), data = tmp, hjust ="top", vjust = "left") +
geom_text(aes(label = txt), data = tmp, hjust ="bottom", vjust = "right") +
geom_text(aes(label = txt), data = tmp, hjust ="bottom", vjust = "left")
tmp <- tibble(hjust, vjust, txt)
label_tr <- tibble(displ = Inf, hwy = Inf)
label_br <- tibble(displ = Inf, hwy = -Inf)
label_tl <- tibble(displ = -Inf, hwy = Inf)
label_bl <- tibble(displ = -Inf, hwy = -Inf)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_text(aes (label = "topr"), data = label_tr, vjust = "top", hjust = "right") +
geom_text(aes (label = "botr"), data = label_br, vjust = "bottom", hjust = "right") +
geom_text(aes (label = "topl"), data = label_tl, vjust = "top", hjust = "left") +
geom_text(aes (label = "botl"), data = label_bl, vjust = "bottom", hjust = "left")
displ <- c(Inf, Inf, -Inf, -Inf)
hwy <- c(Inf, -Inf, Inf, -Inf)
txt <- c("top right", "bottom right", "bottom left", "top left")
tmp <- tibble(displ, hwy, txt)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_text(aes(label = txt), data = tmp, hjust ="top", vjust = "right") +
geom_text(aes(label = txt), data = tmp, hjust ="top", vjust = "left") +
geom_text(aes(label = txt), data = tmp, hjust ="bottom", vjust = "right") +
geom_text(aes(label = txt), data = tmp, hjust ="bottom", vjust = "left")
tmp <- tibble(displ, hwy, txt)
displ <- c(Inf, Inf, -Inf, -Inf)
hwy <- c(Inf, -Inf, Inf, -Inf)
txt <- c("top right", "bottom right", "bottom left", "top left")
tmp <- tibble(displ, hwy, txt)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_text(aes(label = txt), data = tmp, hjust ="top", vjust = "right") +
geom_text(aes(label = txt), data = tmp, hjust ="bottom", vjust = "left") +
geom_text(aes(label = txt), data = tmp, hjust ="bottom", vjust = "right") +
geom_text(aes(label = txt), data = tmp, hjust ="top", vjust = "left")
displ <- c(Inf, Inf, -Inf, -Inf)
hwy <- c(Inf, -Inf, -Inf, Inf)
txt <- c("top right", "bottom right", "bottom left", "top left")
tmp <- tibble(displ, hwy, txt)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_text(aes(label = txt), data = tmp, hjust ="top", vjust = "right") +
geom_text(aes(label = txt), data = tmp, hjust ="bottom", vjust = "left") +
geom_text(aes(label = txt), data = tmp, hjust ="bottom", vjust = "right") +
geom_text(aes(label = txt), data = tmp, hjust ="top", vjust = "left")
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(colour = class)) +
geom_smooth(se = FALSE) +
labs(
x = "Engine displacement (L)",
y = "Highway fuel economy (mpg)",
title = "Here's a custom title for my plot",
subtitle = "And here's a custom subtitle",
colour = "Car type"
)
set.seed(12345)
par(mar=rep(0.2,4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
dataMatrix
image(1:10, 1:40, t(dataMtrix[,nrow(dataMatrix:1)]))
image(1:10, 1:40, t(dataMatrix[,nrow(dataMatrix:1)]))
image(1:10, 1:40, t(dataMatrix)[,nrow(dataMatrix:1)]))
image(1:10, 1:40, t(dataMatrix)[,nrow(dataMatrix):1]))
image(1:10, 1:40, t(dataMatrix)[,nrow(dataMatrix):1])
t(dataMatrix)
dataMatrix
View(dataMatrix)
t(dataMatrix)
tmp <- c(1,2)
tmp
t(tmp)
tmp <- matrix(c(1,2), c(3,4))
tmp <- data.frame(c(1,2), c(3,4))
tmp
t(tmp)
t(dataMatrix)[,nrow(dataMatrix):1]
heatmap(dataMatrix)
rep(c(0,3), each = 5)
library(swirl)
swirl()
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
u
diag
matu %*% diag %*% t(matv)
scale(mat)
mat
svd(scale(mat))
scale(mat)
prcomp(scale(mat))
svd1
svd1$v[,1]
svd1$d
svd(dataMatrix)
head(constantMatrix)
svd2$d
svd2$v[2,]
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- svd1$u %*% svd1$d %*% avd1$v
a1 <- svd1$u %*% svd1$d %*% svd1$v
a1 <- (svd1$u[,1] %*% svd1$d[1]) * svd1$v[1]
a1 <- (svd1$u[,1] %*% svd1$d[1,]) * svd1$v[1]
2+2
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a1
t(svd1$v[,1])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd(,563:563))
names(ssd[],563:563])
names(ssd[,563:563])
names(ssd[563:563])
names(ssd[562:563])
table(ssd$subject)
sum(table(ssd$subject))
ssd$activity
table(ssd$activity)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[1:12])
myedit("showXY.R")
showMe(sub1[1:6])
showMe(c(1:6))
mdist <- dist(sub1[,1:3])
mdist
hclustering <- hclus(mdist)
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
mpclust(hclustering, lab.col = unclass(sub1$activity))
mplclust(hclustering, lab.col = unclass(sub1$activity))
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562, 563)]))
svd1$u
dim(sd1$u)
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,10:12])
mdist <- dist(sub1[,c(10:12, maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering,lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c(562:563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[,-c(562:563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
kClust$centers
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size == 49)
plot(kClust$centers[walkdown,1:12], pch = 19, ylab = "Walkdown Cluster")
NEI <- readRDS("summarySCC_PM25.rds")
setwd('/Users/oskipper/Documents/Data Science/DSAccelerator/SecondPhase/Coursera/ExploratoryDataAnlysis/Final Project/')
NEI <- readRDS("summarySCC_PM25.rds")
NEI
library(tidyverse)
NEI
NEI %>%
pollutant %>% count()
NEI %>%
group_by(pollutant) %>% count()
NEI
NEI %>%
group_by(Pollutant) %>% count()
Summary(NEI)
summary(NEI)
NEI
SCC
SCC <- readRDS("Source_Classification_Code.rds")
SCC
View(SCC)
NEI %>%
group_by(fips) %>% count()
NEI
atlas_conn <- rvdata::getAtlasDatabaseConnection(company = 'dsc')
query1 <- 'DROP TABLE IF EXISTS #main
SELECT
FCSD.msg_WebContext_SessionId as SessionID,
FCSD.landingPageRaw,
FCSD.msg_ExperienceId
,cast(FCSD.sessionStartTime AS DATE) AS SessionDate,
FCSD.TenantId,
COUNT(DISTINCT FCSD.sessionIDCalls) AS CallResponse,
COUNT(DISTINCT FCSD.SessionIDCartRope) AS CartResponse,
FCSD.CartOrder as CartOrder,
COUNT(DISTINCT FCSD.theOrderID) AS Sold
into #main
FROM ODS.frontier.CohesionSessionDetails FCSD
WHERE cast(FCSD.sessionStartTime AS DATE) >= \'2017-10-01\'
GROUP BY
FCSD.msg_WebContext_SessionId,
FCSD.landingPageRaw,
FCSD.msg_ExperienceId,
cast(FCSD.sessionStartTime AS DATE),
FCSD.TenantId,
FCSD.CartOrder;
select M.SessionDate,
M.landingPageRaw,
M.msg_ExperienceId,
COUNT(DISTINCT M.SessionID) as Sessions,
SUM(M.CallResponse) as Calls,
SUM(M.CartResponse) as CartEntries,
SUM(M.Sold)-SUM(M.CartOrder) as CallOrders,
SUM(M.CartOrder) as CartOrders,
SUM(M.Sold) as TotalOrders
from #main M
where 1=1
group by M.SessionDate, M.msg_ExperienceId, M.landingPageRaw'
data <- rvdata::pullDbData(queryString = query1, dbType = 'MSSQL', conn = atlas_conn)
query1 <- '
set nocount on;
drop table if exists #main;
SELECT
FCSD.msg_WebContext_SessionId as SessionID,
FCSD.landingPageRaw,
FCSD.msg_ExperienceId
,cast(FCSD.sessionStartTime AS DATE) AS SessionDate,
FCSD.TenantId,
COUNT(DISTINCT FCSD.sessionIDCalls) AS CallResponse,
COUNT(DISTINCT FCSD.SessionIDCartRope) AS CartResponse,
FCSD.CartOrder as CartOrder,
COUNT(DISTINCT FCSD.theOrderID) AS Sold
into #main
FROM ODS.frontier.CohesionSessionDetails FCSD
WHERE cast(FCSD.sessionStartTime AS DATE) >= \'2017-10-01\'
GROUP BY
FCSD.msg_WebContext_SessionId,
FCSD.landingPageRaw,
FCSD.msg_ExperienceId,
cast(FCSD.sessionStartTime AS DATE),
FCSD.TenantId,
FCSD.CartOrder;
select M.SessionDate,
M.landingPageRaw,
M.msg_ExperienceId,
COUNT(DISTINCT M.SessionID) as Sessions,
SUM(M.CallResponse) as Calls,
SUM(M.CartResponse) as CartEntries,
SUM(M.Sold)-SUM(M.CartOrder) as CallOrders,
SUM(M.CartOrder) as CartOrders,
SUM(M.Sold) as TotalOrders
from #main M
where 1=1
group by M.SessionDate, M.msg_ExperienceId, M.landingPageRaw'
query1 <- '
set nocount on;
drop table if exists #main;
SELECT
FCSD.msg_WebContext_SessionId as SessionID,
FCSD.landingPageRaw,
FCSD.msg_ExperienceId
,cast(FCSD.sessionStartTime AS DATE) AS SessionDate,
FCSD.TenantId,
COUNT(DISTINCT FCSD.sessionIDCalls) AS CallResponse,
COUNT(DISTINCT FCSD.SessionIDCartRope) AS CartResponse,
FCSD.CartOrder as CartOrder,
COUNT(DISTINCT FCSD.theOrderID) AS Sold
into #main
FROM ODS.frontier.CohesionSessionDetails FCSD
WHERE cast(FCSD.sessionStartTime AS DATE) >= \'2017-11-01\'
GROUP BY
FCSD.msg_WebContext_SessionId,
FCSD.landingPageRaw,
FCSD.msg_ExperienceId,
cast(FCSD.sessionStartTime AS DATE),
FCSD.TenantId,
FCSD.CartOrder;
select M.SessionDate,
M.landingPageRaw,
M.msg_ExperienceId,
COUNT(DISTINCT M.SessionID) as Sessions,
SUM(M.CallResponse) as Calls,
SUM(M.CartResponse) as CartEntries,
SUM(M.Sold)-SUM(M.CartOrder) as CallOrders,
SUM(M.CartOrder) as CartOrders,
SUM(M.Sold) as TotalOrders
from #main M
where 1=1
group by M.SessionDate, M.msg_ExperienceId, M.landingPageRaw'
data <- rvdata::pullDbData(queryString = query1, dbType = 'MSSQL', conn = atlas_conn)
query1 <- '
set nocount on;
SELECT
FCSD.msg_WebContext_SessionId as SessionID,
FCSD.landingPageRaw,
FCSD.msg_ExperienceId
,cast(FCSD.sessionStartTime AS DATE) AS SessionDate,
FCSD.TenantId,
COUNT(DISTINCT FCSD.sessionIDCalls) AS CallResponse,
COUNT(DISTINCT FCSD.SessionIDCartRope) AS CartResponse,
FCSD.CartOrder as CartOrder,
COUNT(DISTINCT FCSD.theOrderID) AS Sold
FROM ODS.frontier.CohesionSessionDetails FCSD
WHERE cast(FCSD.sessionStartTime AS DATE) >= \'2017-11-01\'
GROUP BY
FCSD.msg_WebContext_SessionId,
FCSD.landingPageRaw,
FCSD.msg_ExperienceId,
cast(FCSD.sessionStartTime AS DATE),
FCSD.TenantId,
FCSD.CartOrder;
'
data <- rvdata::pullDbData(queryString = query1, dbType = 'MSSQL', conn = atlas_conn)
mydata <- data
mydata %>%
group_by(SessionDate, msg_ExperienceId, landingPageRaw) %>%
summarise(Sessions = unique(SessionID))
mydata %>%
group_by(SessionDate, msg_ExperienceId, landingPageRaw) %>%
summarise(Sessions = count_unique(SessionID))
mydata %>%
group_by(SessionDate, msg_ExperienceId, landingPageRaw) %>%
summarise(Sessions = n(), Calls = sum(CallResponse))
mydata %>%
group_by(SessionDate, msg_ExperienceId, landingPageRaw) %>%
summarise(Sessions = n(),
Calls = sum(CallResponse),
CartEntries = sum(CartResponse),
CallOrders = sum(Sold) - sum(CartOrder),
CartOrders = sum(CartOrder),
TotalOrders = sum(Sold)
)
agg_data <- mydata %>%
group_by(SessionDate, msg_ExperienceId, landingPageRaw) %>%
summarise(Sessions = n(),
Calls = sum(CallResponse),
CartEntries = sum(CartResponse),
CallOrders = sum(Sold) - sum(CartOrder),
CartOrders = sum(CartOrder),
TotalOrders = sum(Sold)
)
mydata
View(agg_data)
mydata %>%
filter(Sessions > 50)
mydata %>%
View()
agg_data %>%
filter(Sessions > 30)
agg_data <- mydata %>%
group_by( msg_ExperienceId, landingPageRaw) %>%
summarise(Sessions = n(),
Calls = sum(CallResponse),
CartEntries = sum(CartResponse),
CallOrders = sum(Sold) - sum(CartOrder),
CartOrders = sum(CartOrder),
TotalOrders = sum(Sold)
)
agg_data %>%
filter(Sessions > 30)
agg_data <- mydata %>%
group_by( msg_ExperienceId, landingPageRaw) %>%
summarise(Sessions = n(),
Calls = sum(CallResponse),
CartEntries = sum(CartResponse),
CallOrders = sum(Sold) - sum(CartOrder),
CartOrders = sum(CartOrder),
TotalOrders = sum(Sold)
) %>%
filter(Sessions > 100)
nrow(agg_data)
agg_data
agg_data <- mydata %>%
group_by( msg_ExperienceId, landingPageRaw) %>%
summarise(Sessions = n(),
Calls = sum(CallResponse),
CartEntries = sum(CartResponse),
CallOrders = sum(Sold) - sum(CartOrder),
CartOrders = sum(CartOrder),
TotalOrders = sum(Sold)
) %>%
mutate(RR = (Calls + CartEntires)/Sessions, CR = (CallOrders + CartOrders)/(Calls + CartEntries)) %>%
filter(Sessions > 100)
